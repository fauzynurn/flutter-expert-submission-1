// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/pages/watchlist_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i12;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ditonton/common/failure.dart' as _i6;
import 'package:ditonton/common/state_enum.dart' as _i10;
import 'package:ditonton/domain/entities/filter_type.dart' as _i11;
import 'package:ditonton/domain/entities/movie.dart' as _i7;
import 'package:ditonton/domain/entities/tv_series.dart' as _i8;
import 'package:ditonton/domain/usecases/get_watchlist_movies.dart' as _i3;
import 'package:ditonton/domain/usecases/get_watchlist_tv_series.dart' as _i4;
import 'package:ditonton/presentation/provider/watchlist_notifier.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetWatchlistMovies_1 extends _i1.SmartFake
    implements _i3.GetWatchlistMovies {
  _FakeGetWatchlistMovies_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetWatchlistTvSeries_2 extends _i1.SmartFake
    implements _i4.GetWatchlistTvSeries {
  _FakeGetWatchlistTvSeries_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetWatchlistMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistMovies extends _i1.Mock
    implements _i3.GetWatchlistMovies {
  MockGetWatchlistMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Movie>>> execute() => (super
          .noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Movie>>>.value(
                      _FakeEither_0<_i6.Failure, List<_i7.Movie>>(
                          this, Invocation.method(#execute, []))))
      as _i5.Future<_i2.Either<_i6.Failure, List<_i7.Movie>>>);
}

/// A class which mocks [GetWatchlistTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistTvSeries extends _i1.Mock
    implements _i4.GetWatchlistTvSeries {
  MockGetWatchlistTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i8.TvSeries>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  _i5.Future<_i2.Either<_i6.Failure, List<_i8.TvSeries>>>.value(
                      _FakeEither_0<_i6.Failure, List<_i8.TvSeries>>(
                          this, Invocation.method(#execute, []))))
          as _i5.Future<_i2.Either<_i6.Failure, List<_i8.TvSeries>>>);
}

/// A class which mocks [WatchlistNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistNotifier extends _i1.Mock implements _i9.WatchlistNotifier {
  MockWatchlistNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetWatchlistMovies get getWatchlistMovies =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistMovies),
              returnValue: _FakeGetWatchlistMovies_1(
                  this, Invocation.getter(#getWatchlistMovies)))
          as _i3.GetWatchlistMovies);
  @override
  _i4.GetWatchlistTvSeries get getWatchlistTvSeries =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistTvSeries),
              returnValue: _FakeGetWatchlistTvSeries_2(
                  this, Invocation.getter(#getWatchlistTvSeries)))
          as _i4.GetWatchlistTvSeries);
  @override
  List<_i7.Movie> get watchlistMovies =>
      (super.noSuchMethod(Invocation.getter(#watchlistMovies),
          returnValue: <_i7.Movie>[]) as List<_i7.Movie>);
  @override
  List<_i8.TvSeries> get watchlistTvSeries =>
      (super.noSuchMethod(Invocation.getter(#watchlistTvSeries),
          returnValue: <_i8.TvSeries>[]) as List<_i8.TvSeries>);
  @override
  _i10.RequestState get watchlistState =>
      (super.noSuchMethod(Invocation.getter(#watchlistState),
          returnValue: _i10.RequestState.Empty) as _i10.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  _i11.FilterType get selectedFilterType =>
      (super.noSuchMethod(Invocation.getter(#selectedFilterType),
          returnValue: _i11.FilterType.movies) as _i11.FilterType);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void onChangeFilterType(_i11.FilterType? type) =>
      super.noSuchMethod(Invocation.method(#onChangeFilterType, [type]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> fetchResult() => (super.noSuchMethod(
      Invocation.method(#fetchResult, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> fetchWatchlistMovie() => (super.noSuchMethod(
      Invocation.method(#fetchWatchlistMovie, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> fetchWatchlistTvSeries() => (super.noSuchMethod(
      Invocation.method(#fetchWatchlistTvSeries, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
