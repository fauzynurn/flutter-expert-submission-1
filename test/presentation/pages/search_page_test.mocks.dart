// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/pages/search_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i11;

import 'package:dartz/dartz.dart' as _i5;
import 'package:ditonton/common/failure.dart' as _i12;
import 'package:ditonton/common/state_enum.dart' as _i8;
import 'package:ditonton/domain/entities/filter_type.dart' as _i9;
import 'package:ditonton/domain/entities/movie.dart' as _i13;
import 'package:ditonton/domain/entities/tv_series.dart' as _i14;
import 'package:ditonton/domain/repositories/movie_repository.dart' as _i4;
import 'package:ditonton/domain/repositories/tv_series_repository.dart' as _i6;
import 'package:ditonton/domain/usecases/search_movies.dart' as _i2;
import 'package:ditonton/domain/usecases/search_tv_series.dart' as _i3;
import 'package:ditonton/presentation/provider/search_notifier.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchMovies_0 extends _i1.SmartFake implements _i2.SearchMovies {
  _FakeSearchMovies_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSearchTvSeries_1 extends _i1.SmartFake
    implements _i3.SearchTvSeries {
  _FakeSearchTvSeries_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMovieRepository_2 extends _i1.SmartFake
    implements _i4.MovieRepository {
  _FakeMovieRepository_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvSeriesRepository_4 extends _i1.SmartFake
    implements _i6.TvSeriesRepository {
  _FakeTvSeriesRepository_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [SearchNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchNotifier extends _i1.Mock implements _i7.SearchNotifier {
  MockSearchNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SearchMovies get searchMovies =>
      (super.noSuchMethod(Invocation.getter(#searchMovies),
              returnValue:
                  _FakeSearchMovies_0(this, Invocation.getter(#searchMovies)))
          as _i2.SearchMovies);
  @override
  _i3.SearchTvSeries get searchTvSeries => (super.noSuchMethod(
          Invocation.getter(#searchTvSeries),
          returnValue:
              _FakeSearchTvSeries_1(this, Invocation.getter(#searchTvSeries)))
      as _i3.SearchTvSeries);
  @override
  _i8.RequestState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i8.RequestState.Empty) as _i8.RequestState);
  @override
  List<dynamic> get searchResult =>
      (super.noSuchMethod(Invocation.getter(#searchResult),
          returnValue: <dynamic>[]) as List<dynamic>);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  _i9.FilterType get selectedFilterType =>
      (super.noSuchMethod(Invocation.getter(#selectedFilterType),
          returnValue: _i9.FilterType.movies) as _i9.FilterType);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void onChangeFilterType(_i9.FilterType? type) =>
      super.noSuchMethod(Invocation.method(#onChangeFilterType, [type]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> fetchResult(String? query) =>
      (super.noSuchMethod(Invocation.method(#fetchResult, [query]),
              returnValue: _i10.Future<void>.value(),
              returnValueForMissingStub: _i10.Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> fetchMovieSearch(String? query) =>
      (super.noSuchMethod(Invocation.method(#fetchMovieSearch, [query]),
              returnValue: _i10.Future<void>.value(),
              returnValueForMissingStub: _i10.Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> fetchTvSeriesSearch(String? query) =>
      (super.noSuchMethod(Invocation.method(#fetchTvSeriesSearch, [query]),
              returnValue: _i10.Future<void>.value(),
              returnValueForMissingStub: _i10.Future<void>.value())
          as _i10.Future<void>);
  @override
  void addListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends _i1.Mock implements _i2.SearchMovies {
  MockSearchMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue:
                  _FakeMovieRepository_2(this, Invocation.getter(#repository)))
          as _i4.MovieRepository);
  @override
  _i10.Future<_i5.Either<_i12.Failure, List<_i13.Movie>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
              returnValue:
                  _i10.Future<_i5.Either<_i12.Failure, List<_i13.Movie>>>.value(
                      _FakeEither_3<_i12.Failure, List<_i13.Movie>>(
                          this, Invocation.method(#execute, [query]))))
          as _i10.Future<_i5.Either<_i12.Failure, List<_i13.Movie>>>);
}

/// A class which mocks [SearchTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchTvSeries extends _i1.Mock implements _i3.SearchTvSeries {
  MockSearchTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.TvSeriesRepository get repository => (super.noSuchMethod(
          Invocation.getter(#repository),
          returnValue:
              _FakeTvSeriesRepository_4(this, Invocation.getter(#repository)))
      as _i6.TvSeriesRepository);
  @override
  _i10.Future<_i5.Either<_i12.Failure, List<_i14.TvSeries>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
          returnValue:
              _i10.Future<_i5.Either<_i12.Failure, List<_i14.TvSeries>>>.value(
                  _FakeEither_3<_i12.Failure, List<_i14.TvSeries>>(
                      this, Invocation.method(#execute, [query])))) as _i10
          .Future<_i5.Either<_i12.Failure, List<_i14.TvSeries>>>);
}
